% function umodGen generates URDME geometry .mat files 
% after importing the percolation configuration .mphbin files
% variable introduction
% ratio                    the occupation probability
% index                   the index for distinguishing different configurations
% model_path        path of the input .mphbin file, i.e. percolation model in Comsol
% customSaveDirectory       user-customized saving directory of 
%                                           the output  .mat file 
function umodGen(ratio,index,model_path,customSaveDirectory)
                  
%% This section was automatically generated by the software 
%% Comsol for convenient use in Matlab  
import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath(model_path);

model.component.create('comp1', true);

model.component('comp1').geom.create('geom1', 2);

model.component('comp1').mesh.create('mesh1');

model.variable.create('var1');
model.variable('var1').label('urdme_sdlevel');
model.variable('var1').set('urdme_sdlevel', '2');
model.component('comp1').variable.create('var2');

model.component('comp1').geom('geom1').run;

model.component('comp1').variable('var2').label('urdmesd_dom');
model.component('comp1').variable('var2').selection.geom('geom1', 2);
model.component('comp1').variable('var2').selection.all;
model.component('comp1').variable('var2').set('urdme_sd', '1');
model.component('comp1').variable.create('var3');
model.component('comp1').variable('var3').label('urdmesd_bnd');
model.component('comp1').variable('var3').set('urdme_sd', '2');

model.component('comp1').geom('geom1').create('imp1', 'Import');
model.component('comp1').geom('geom1').feature('imp1').set('filename', [model_path,'/Model-',num2str(ratio),'-',num2str(index),'.mphbin']);
model.component('comp1').geom('geom1').feature('imp1').importData;
model.component('comp1').geom('geom1').run;

model.component('comp1').physics.create('tds', 'DilutedSpecies', {'c'});
model.component('comp1').physics('tds').feature('cdm1').set('minput_temperature_src', 'userdef');
model.component('comp1').physics('tds').prop('TransportMechanism').set('Convection', false);
model.component('comp1').physics('tds').field('concentration').component({'c' 'c2' 'c3' 'c4'});
model.component('comp1').physics('tds').field('concentration').component(1, 'c1');
model.component('comp1').physics('tds').feature('cdm1').set('D_c1', {'1e-13[m^2/s]' '0' '0' '0' '1e-13[m^2/s]' '0' '0' '0' '1e-13[m^2/s]'});
model.component('comp1').physics('tds').feature('cdm1').set('D_c2', {'1e-13[m^2/s]' '0' '0' '0' '1e-13[m^2/s]' '0' '0' '0' '1e-13[m^2/s]'});
model.component('comp1').physics('tds').feature('cdm1').set('D_c3', {'1e-13[m^2/s]' '0' '0' '0' '1e-13[m^2/s]' '0' '0' '0' '1e-13[m^2/s]'});
model.component('comp1').physics('tds').feature('cdm1').set('D_c4', {'1e-10[m^2/s]' '0' '0' '0' '1e-10[m^2/s]' '0' '0' '0' '1e-10[m^2/s]'});

model.component('comp1').mesh('mesh1').create('ftri1', 'FreeTri');
model.component('comp1').mesh('mesh1').feature('size').set('hmax', 9.29E-5);
model.component('comp1').mesh('mesh1').feature('size').set('hmin', 1.67E-5);
model.component('comp1').mesh('mesh1').feature('size').set('hgrad', 1.5);
model.component('comp1').mesh('mesh1').feature('size').set('hcurve', 0.6);
model.component('comp1').mesh('mesh1').feature('size').set('hnarrow', 0.5);
model.component('comp1').mesh('mesh1').feature('size').set('custom', false);
model.component('comp1').mesh('mesh1').feature('ftri1').selection.geom('geom1', 2);
model.component('comp1').mesh('mesh1').feature('ftri1').selection.all;
model.component('comp1').mesh('mesh1').feature('ftri1').create('size1', 'Size');
model.component('comp1').mesh('mesh1').feature('ftri1').feature('size1').set('custom', true);
model.component('comp1').mesh('mesh1').feature('ftri1').feature('size1').set('hmaxactive', true);
model.component('comp1').mesh('mesh1').feature('ftri1').feature('size1').set('hminactive', true);
model.component('comp1').mesh('mesh1').feature('ftri1').feature('size1').set('hmax', '1.01*(20*3^0.5+20)*1e-6');
model.component('comp1').mesh('mesh1').feature('ftri1').feature('size1').set('hmin', '(20*3^0.5+20)*1e-6');

model.study.create('std1');
model.study('std1').setGenConv(true);
model.study('std1').create('time', 'Transient');
model.study('std1').feature('time').activate('tds', true);
model.study('std1').feature('time').set('tlist', 'range(0,1,1)');

model.sol.create('sol1');
model.sol('sol1').study('std1');

model.study('std1').feature('time').set('notlistsolnum', 1);
model.study('std1').feature('time').set('notsolnum', '1');
model.study('std1').feature('time').set('listsolnum', 1);
model.study('std1').feature('time').set('solnum', '1');

model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'time');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'time');
model.sol('sol1').create('t1', 'Time');
model.sol('sol1').feature('t1').set('tlist', 'range(0,1,1)');
model.sol('sol1').feature('t1').set('plot', 'off');
model.sol('sol1').feature('t1').set('plotgroup', 'Default');
model.sol('sol1').feature('t1').set('plotfreq', 'tout');
model.sol('sol1').feature('t1').set('probesel', 'all');
model.sol('sol1').feature('t1').set('probes', {});
model.sol('sol1').feature('t1').set('probefreq', 'tsteps');
model.sol('sol1').feature('t1').set('rtol', 0.005);
model.sol('sol1').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol1').feature('t1').set('maxorder', 2);
model.sol('sol1').feature('t1').set('control', 'time');
model.sol('sol1').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('t1').feature('fc1').set('jtech', 'once');
model.sol('sol1').feature('t1').feature('fc1').set('damp', 0.9);
model.sol('sol1').feature('t1').feature('fc1').set('maxiter', 8);
model.sol('sol1').feature('t1').feature('fc1').set('stabacc', 'aacc');
model.sol('sol1').feature('t1').feature('fc1').set('aaccdim', 5);
model.sol('sol1').feature('t1').feature('fc1').set('aaccmix', 0.9);
model.sol('sol1').feature('t1').feature('fc1').set('aaccdelay', 1);
model.sol('sol1').feature('t1').create('d1', 'Direct');
model.sol('sol1').feature('t1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('t1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('t1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('t1').feature('fc1').set('jtech', 'once');
model.sol('sol1').feature('t1').feature('fc1').set('damp', 0.9);
model.sol('sol1').feature('t1').feature('fc1').set('maxiter', 8);
model.sol('sol1').feature('t1').feature('fc1').set('stabacc', 'aacc');
model.sol('sol1').feature('t1').feature('fc1').set('aaccdim', 5);
model.sol('sol1').feature('t1').feature('fc1').set('aaccmix', 0.9);
model.sol('sol1').feature('t1').feature('fc1').set('aaccdelay', 1);
model.sol('sol1').feature('t1').feature.remove('fcDef');
model.sol('sol1').attach('std1');

model.result.create('pg1', 'PlotGroup2D');
model.result('pg1').label('Concentration (tds)');
model.result('pg1').set('data', 'dset1');
model.result('pg1').feature.create('surf1', 'Surface');
model.result('pg1').feature('surf1').label('Surface');
model.result('pg1').feature('surf1').set('smooth', 'internal');
model.result('pg1').feature('surf1').set('data', 'parent');
model.result.remove('pg1');

model.component('comp1').variable('var3').selection.geom('geom1', 1);
model.component('comp1').variable('var3').selection.all;

model.sol('sol1').study('std1');

model.study('std1').feature('time').set('notlistsolnum', 1);
model.study('std1').feature('time').set('notsolnum', '1');
model.study('std1').feature('time').set('listsolnum', 1);
model.study('std1').feature('time').set('solnum', '1');

model.sol('sol1').feature.remove('t1');
model.sol('sol1').feature.remove('v1');
model.sol('sol1').feature.remove('st1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'time');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'time');
model.sol('sol1').create('t1', 'Time');
model.sol('sol1').feature('t1').set('tlist', 'range(0,1,1)');
model.sol('sol1').feature('t1').set('plot', 'off');
model.sol('sol1').feature('t1').set('plotgroup', 'Default');
model.sol('sol1').feature('t1').set('plotfreq', 'tout');
model.sol('sol1').feature('t1').set('probesel', 'all');
model.sol('sol1').feature('t1').set('probes', {});
model.sol('sol1').feature('t1').set('probefreq', 'tsteps');
model.sol('sol1').feature('t1').set('rtol', 0.005);
model.sol('sol1').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol1').feature('t1').set('maxorder', 2);
model.sol('sol1').feature('t1').set('control', 'time');
model.sol('sol1').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('t1').feature('fc1').set('jtech', 'once');
model.sol('sol1').feature('t1').feature('fc1').set('damp', 0.9);
model.sol('sol1').feature('t1').feature('fc1').set('maxiter', 8);
model.sol('sol1').feature('t1').feature('fc1').set('stabacc', 'aacc');
model.sol('sol1').feature('t1').feature('fc1').set('aaccdim', 5);
model.sol('sol1').feature('t1').feature('fc1').set('aaccmix', 0.9);
model.sol('sol1').feature('t1').feature('fc1').set('aaccdelay', 1);
model.sol('sol1').feature('t1').create('d1', 'Direct');
model.sol('sol1').feature('t1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('t1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('t1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('t1').feature('fc1').set('jtech', 'once');
model.sol('sol1').feature('t1').feature('fc1').set('damp', 0.9);
model.sol('sol1').feature('t1').feature('fc1').set('maxiter', 8);
model.sol('sol1').feature('t1').feature('fc1').set('stabacc', 'aacc');
model.sol('sol1').feature('t1').feature('fc1').set('aaccdim', 5);
model.sol('sol1').feature('t1').feature('fc1').set('aaccmix', 0.9);
model.sol('sol1').feature('t1').feature('fc1').set('aaccdelay', 1);
model.sol('sol1').feature('t1').feature.remove('fcDef');
model.sol('sol1').attach('std1');

model.result.create('pg1', 'PlotGroup2D');
model.result('pg1').label('Concentration (tds)');
model.result('pg1').set('data', 'dset1');
model.result('pg1').feature.create('surf1', 'Surface');
model.result('pg1').feature('surf1').label('Surface');
model.result('pg1').feature('surf1').set('smooth', 'internal');
model.result('pg1').feature('surf1').set('data', 'parent');

model.sol('sol1').runAll;

model.result('pg1').run;

umod =comsol2urdme(model);
xmi = mphxmeshinfo(umod.comsol);
%% encode the Dirichlet boundary condition into the .mat file
%Get where the edge nodes are in ActualNodes
FEMnodes=find(xmi.nodes.dofs(1,:)>=0);
edgenodes = unique([xmi.elements.edg.nodes(1,:);xmi.elements.edg.nodes(2,:)]);
volNodes = setdiff(FEMnodes,edgenodes+1);
[~,edgeNodesPositionInFEMNodes] = ismember(edgenodes+1,FEMnodes);
xmi.x =xmi.nodes.coords(1,FEMnodes);
xmi.y =xmi.nodes.coords(2,FEMnodes);
xmi.edgenodes = edgenodes;
xmi.volNodes = volNodes;
xmi.edgeNodesPositionInFEMNodes = edgeNodesPositionInFEMNodes;
save([customSaveDirectory,num2str(ratio),'/umod_',num2str(ratio),'_',num2str(index),'.mat'],'umod','xmi');
end
